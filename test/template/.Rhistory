sheetNames <- c('IPRE PERM', 'IPRE CD')
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheet = sheetNames[1],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> PermData2019
# Chunk 1
#dep_auto()
opts_chunk$set(fig.height=4, fig.show="asis",fig.pos='H',message=FALSE,
warning=FALSE,echo=T, fig.align='center', autodep=T,
cache=F,dev=c('pdf','jpeg'),dpi=256)
options(scipen=999, digits = 3, stringsAsFactors = F, java.parameters = "-Xmx1024m")
# Chunk 2
#LOAD SUPPORTING LIBRARIES###############################################
library(SNVDRR)
# library(openxlsx)
# library(XLConnect) #interface with Excel documents
# library(ggplot2)   #advanced visualization package
# library(tidyverse)     #advanced data manipulation package
# library(stargazer)#supports APA compliant table generation
# library(moments) #enables the skewness and kurtosis calculation
# #SPECIFY COMMONLY USED FUNCTIONS#######################################
# `%not in%` <- Negate("%in%") #very useful negation function
# Chunk 3
sourcePath <- 'R:/regulatory/validation/DRR 2019/IPRE PSI/Source/'
sourceFileName <- 'IPRE CD PERM PD Validation (active loans) 09 05 16.xlsx'
sheetNames <- c('IPRE PERM', 'IPRE CD')
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheet = sheetNames[1],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> PermData2016
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheetNames[2],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> CDData2016
# Chunk 4
cdDF2016 <- data.frame(Description = c('Data Import'),
CD = as.character(nrow(CDData2016)),
Perm = as.character(nrow(PermData2016)))
# Chunk 5
CD_Unique2016 <- CDData2016[!duplicated(CDData2016$LoanID), ]
Perm_Unique2016 <- PermData2016[!duplicated(PermData2016$LoanID), ]
# Chunk 6
bind_rows(cdDF2016, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2016)),
Perm = as.character(nrow(Perm_Unique2016)))) %>%
stargazer(title = '2016 Data Counts - Current Population Metrics', summary = F, table.placement = 'H', rownames = F)
# Chunk 7
sourceFileName <- 'IPRE CD PERM PD Validation (active loans) 04 05 17.xlsx'
sheetNames <- c('IPRE PERM', 'IPRE CD')
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheet = sheetNames[1],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> PermData2017
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheetNames[2],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> CDData2017
# Chunk 8
cdDF2017 <- data.frame(Description = c('Data Import'),
CD = as.character(nrow(CDData2017)),
Perm = as.character(nrow(PermData2017)))
# Chunk 9
CD_Unique2017 <- CDData2017[!duplicated(CDData2017$LoanID), ]
Perm_Unique2017 <- PermData2017[!duplicated(PermData2017$LoanID), ]
# Chunk 10
bind_rows(cdDF2017, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2017)),
Perm = as.character(nrow(Perm_Unique2017)))) %>%
stargazer(title = '2017 Data Counts - Current Population Metrics', summary = F, table.placement = 'H', rownames = F)
# Chunk 11
sourceFileName <- 'IPRE CD PERM PD Validation (active loans) 04 04 18.xlsx'
sheetNames <- c('IPRE PERM', 'IPRE CD')
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheet = sheetNames[1],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> PermData2018
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheetNames[2],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> CDData2018
# Chunk 12
cdDF2018 <- data.frame(Description = c('Data Import'),
CD = as.character(nrow(CDData2018)),
Perm = as.character(nrow(PermData2018)))
# Chunk 13
CD_Unique2018 <- CDData2018[!duplicated(CDData2018$LoanID), ]
Perm_Unique2018 <- PermData2018[!duplicated(PermData2018$LoanID), ]
# Chunk 14
bind_rows(cdDF2018, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2018)),
Perm = as.character(nrow(Perm_Unique2018)))) %>%
stargazer(title = '2018 Data Counts - Current Population Metrics', summary = F, table.placement = 'H', rownames = F)
sourceFileName <- 'IPRE CD PERM PD Validation (active loans) 05 03 19.xlsx'
sheetNames <- c('IPRE PERM', 'IPRE CD')
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheet = sheetNames[1],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> PermData2019
read.xlsx(xlsxFile = paste0(sourcePath,sourceFileName),
sheetNames[2],
startRow = 2) %>%
mutate_at(., vars(one_of(c('System.PD.%',
'Annualized.Holding.Period.EDF.(Quantitative.EDF)'))),
funs(as.numeric)) %>%
select(LoanID = Loan.ID,
SystemPD = 'System.PD.%',
EDF = 'Annualized.Holding.Period.EDF.(Quantitative.EDF)') %>%
filter(!is.na(LoanID),
!is.na (SystemPD),
!is.na(EDF)) -> CDData2019
cdDF2019 <- data.frame(Description = c('Data Import'),
CD = as.character(nrow(CDData2018)),
Perm = as.character(nrow(PermData2018)))
cdDF2019
View(CDData2019)
CD_Unique2019 <- CDData2019[!duplicated(CDData2019$LoanID), ]
Perm_Unique2019 <- PermData2019[!duplicated(PermData2019$LoanID), ]
bind_rows(cdDF2019, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2019)),
Perm = as.character(nrow(Perm_Unique2019)))) %>%
stargazer(title = '2019 Data Counts - Current Population Metrics', summary = F, table.placement = 'H', rownames = F)
bind_rows(cdDF2019, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2019)),
Perm = as.character(nrow(Perm_Unique2019))))
View(CD_Unique2019)
bind_rows(cdDF2019, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2019)),
Perm = as.character(nrow(Perm_Unique2019))))
cdDF2019 <- data.frame(Description = c('Data Import'),
CD = as.character(nrow(CDData2019)),
Perm = as.character(nrow(PermData2019)))
bind_rows(cdDF2019, data.frame(Description = c('Keep Unique Entries'),
CD = as.character(nrow(CD_Unique2019)),
Perm = as.character(nrow(Perm_Unique2019))))
data.frame(Year = '2016',
Mean = mean(Perm_Unique2016$SystemPD),
Median = median(Perm_Unique2016$SystemPD),
Variance = var(Perm_Unique2016$SystemPD),
Skewness = format(round(skewness(Perm_Unique2016$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2016$SystemPD), 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017',
Mean = mean(Perm_Unique2017$SystemPD),
Median = median(Perm_Unique2017$SystemPD),
Variance = var(Perm_Unique2017$SystemPD),
Skewness = format(round(skewness(Perm_Unique2017$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2017$SystemPD), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018',
Mean = mean(Perm_Unique2018$SystemPD),
Median = median(Perm_Unique2018$SystemPD),
Variance = var(Perm_Unique2018$SystemPD),
Skewness = format(round(skewness(Perm_Unique2018$SystemPD), 4), nsmall =4),
Kurtosis = format(round(kurtosis(Perm_Unique2018$SystemPD), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2019',
Mean = mean(Perm_Unique2019$SystemPD),
Median = median(Perm_Unique2019$SystemPD),
Variance = var(Perm_Unique2019$SystemPD),
Skewness = format(round(skewness(Perm_Unique2019$SystemPD), 4), nsmall =4),
Kurtosis = format(round(kurtosis(Perm_Unique2019$SystemPD), 4), nsmall = 4)))
AllyearsPD <- bind_rows(mutate(Perm_Unique2016, Year = '2016'),
mutate(Perm_Unique2017, Year = '2017'),
mutate(Perm_Unique2018, Year = '2018'),
mutate(Perm_Unique2019, Year = '2019'))
ggplot(AllyearsPD, aes(SystemPD, colours = Year))  + stat_ecdf(geom = 'step') +
labs(title = "Empirical Cumulative Density Function for Perm", y = "")
ksObj <- ks.test(Perm_Unique2016$SystemPD, y=Perm_Unique2017$SystemPD, alternative = 'two.sided' )
ksObj18 <- ks.test(Perm_Unique2017$SystemPD, y=Perm_Unique2018$SystemPD, alternative = 'two.sided' )
ksObj1618 <- ks.test(Perm_Unique2016$SystemPD, y=Perm_Unique2018$SystemPD, alternative = 'two.sided' )
ksObj1619 <- ks.test(Perm_Unique2016$SystemPD, y=Perm_Unique2019$SystemPD, alternative = 'two.sided' )
ksObj1719 <- ks.test(Perm_Unique2017$SystemPD, y=Perm_Unique2019$SystemPD, alternative = 'two.sided' )
ksObj19 <- ks.test(Perm_Unique2018$SystemPD, y=Perm_Unique2019$SystemPD, alternative = 'two.sided' )
data.frame(Year = '2016 to 2017',
D = ksObj$statistic,
p = format(round(ksObj$p.value, digits = 4),nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017 to 2018',
D = ksObj18$statistic,
p = format(round(ksObj18$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2018',
D = ksObj1618$statistic,
p = format(round(ksObj1618$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2019',
D = ksObj1619$statistic,
p = format(round(ksObj1619$p.value, digits = 4),nsmall = 4))) %>%
bind_rows(data.frame(Year = '2017 to 2019',
D = ksObj1719$statistic,
p = format(round(ksObj1719$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018 to 2019',
D = ksObj19$statistic,
p = format(round(ksObj19$p.value, digits = 4), nsmall = 4)))
data.frame(Year = '2016',
Mean = mean(Perm_Unique2016$EDF),
Median = median(Perm_Unique2016$EDF),
Variance = var(Perm_Unique2016$EDF),
Skewness = format(round(skewness(Perm_Unique2016$EDF), 4), nsmal = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2016$EDF), 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017',
Mean = mean(Perm_Unique2017$EDF),
Median = median(Perm_Unique2017$EDF),
Variance = var(Perm_Unique2017$EDF),
Skewness = format(round(skewness(Perm_Unique2017$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2017$EDF), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018',
Mean = mean(Perm_Unique2018$EDF),
Median = median(Perm_Unique2018$EDF),
Variance = var(Perm_Unique2018$EDF),
Skewness = format(round(skewness(Perm_Unique2018$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2018$EDF), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2019',
Mean = mean(Perm_Unique2019$EDF),
Median = median(Perm_Unique2019$EDF),
Variance = var(Perm_Unique2019$EDF),
Skewness = format(round(skewness(Perm_Unique2019$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(Perm_Unique2019$EDF), 4), nsmall = 4)))
ggplot(AllyearsPD, aes(EDF, colours = Year)) + stat_ecdf(geom = 'step') +
labs(title = "Empirical Cumulative Density Function for Perm EDF", y = "")
ksObjEDF16 <- ks.test(Perm_Unique2016$EDF, y=Perm_Unique2017$EDF, alternative = 'two.sided' )
ksObjEDF18 <-ks.test(Perm_Unique2017$EDF, y=Perm_Unique2018$EDF, alternative = 'two.sided' )
ksObjEDF1618 <-ks.test(Perm_Unique2016$EDF, y=Perm_Unique2018$EDF, alternative = 'two.sided' )
ksObjEDF1619 <- ks.test(Perm_Unique2016$EDF, y=Perm_Unique2019$EDF, alternative = 'two.sided' )
ksObjEDF1719 <-ks.test(Perm_Unique2017$EDF, y=Perm_Unique2019$EDF, alternative = 'two.sided' )
ksObjEDF19 <-ks.test(Perm_Unique2018$EDF, y=Perm_Unique2019$EDF, alternative = 'two.sided' )
data.frame(Year = '2016 to 2017',
D = ksObjEDF16$statistic,
p = format(round(ksObjEDF16$p.value, digits = 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017 to 2018',
D = ksObjEDF18$statistic,
p = format(round(ksObjEDF18$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2018',
D = ksObjEDF1618$statistic,
p = format(round(ksObjEDF1618$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2019',
D = ksObjEDF1619$statistic,
p = format(round(ksObjEDF1619$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2017 to 2019',
D = ksObjEDF1719$statistic,
p = format(round(ksObjEDF1719$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018 to 2019',
D = ksObjEDF19$statistic,
p = format(round(ksObjEDF19$p.value, digits = 4), nsmall = 4))))
data.frame(Year = '2016 to 2017',
D = ksObjEDF16$statistic,
p = format(round(ksObjEDF16$p.value, digits = 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017 to 2018',
D = ksObjEDF18$statistic,
p = format(round(ksObjEDF18$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2018',
D = ksObjEDF1618$statistic,
p = format(round(ksObjEDF1618$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2019',
D = ksObjEDF1619$statistic,
p = format(round(ksObjEDF1619$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2017 to 2019',
D = ksObjEDF1719$statistic,
p = format(round(ksObjEDF1719$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018 to 2019',
D = ksObjEDF19$statistic,
p = format(round(ksObjEDF19$p.value, digits = 4), nsmall = 4)))
data.frame(Year = "2016",
Mean = mean(CD_Unique2016$SystemPD),
Median = median(CD_Unique2016$SystemPD),
Variance = var(CD_Unique2016$SystemPD),
Skewness = format(round(skewness(CD_Unique2016$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2016$SystemPD), 4), nsmall = 4))  %>%
bind_rows(data.frame(Year = '2017',
Mean = mean(CD_Unique2017$SystemPD),
Median = median(CD_Unique2017$SystemPD),
Variance = var(CD_Unique2017$SystemPD),
Skewness = format(round(skewness(CD_Unique2017$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2017$SystemPD), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018',
Mean = mean(CD_Unique2018$SystemPD),
Median = median(CD_Unique2018$SystemPD),
Variance = var(CD_Unique2018$SystemPD),
Skewness = format(round(skewness(CD_Unique2018$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2018$SystemPD), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2019',
Mean = mean(CD_Unique2019$SystemPD),
Median = median(CD_Unique2019$SystemPD),
Variance = var(CD_Unique2019$SystemPD),
Skewness = format(round(skewness(CD_Unique2019$SystemPD), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2019$SystemPD), 4), nsmall = 4)))
AllyearsCD <- bind_rows(mutate(CD_Unique2016, Year = '2016'),
mutate(CD_Unique2017, Year = '2017'),
mutate(CD_Unique2018, Year = '2018'),
mutate(CD_Unique2019, Year = '2019'))
ggplot(AllyearsCD, aes(SystemPD, colours = Year))  + stat_ecdf(geom = 'step') +
labs(title = "Empirical Cumulative Density Function for CD", y = "")
ksObjPD16 <- ks.test(CD_Unique2016$SystemPD, y=CD_Unique2017$SystemPD, alternative = 'two.sided' )
ksObjPD17 <- ks.test(CD_Unique2017$SystemPD, y=CD_Unique2018$SystemPD, alternative = 'two.sided' )
ksObjPD1618 <- ks.test(CD_Unique2016$SystemPD, y=CD_Unique2018$SystemPD, alternative = 'two.sided' )
ksObjPD1619 <- ks.test(CD_Unique2016$SystemPD, y=CD_Unique2019$SystemPD, alternative = 'two.sided' )
ksObjPD1719 <- ks.test(CD_Unique2017$SystemPD, y=CD_Unique2019$SystemPD, alternative = 'two.sided' )
ksObjPD19 <- ks.test(CD_Unique2018$SystemPD, y=CD_Unique2019$SystemPD, alternative = 'two.sided' )
data.frame(Year = '2016 to 2017',
D = ksObjPD16$statistic,
p = format(round(ksObjPD16$p.value, digits = 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017 to 2018',
D = ksObjPD17$statistic,
p = format(round(ksObjPD17$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2018',
D = ksObjPD1618$statistic,
p = format(round(ksObjPD1618$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2019',
D = ksObjPD1619$statistic,
p = format(round(ksObjPD1619$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2017 to 2019',
D = ksObjPD1719$statistic,
p = format(round(ksObjPD1719$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018 to 2019',
D = ksObjPD19$statistic,
p = format(round(ksObjPD19$p.value, digits = 4), nsmall = 4)))
data.frame(Year = '2016',
Mean = mean(CD_Unique2016$EDF),
Median = median(CD_Unique2016$EDF),
Variance = var(CD_Unique2016$EDF),
Skewness = format(round(skewness(CD_Unique2016$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2016$EDF), 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017',
Mean = mean(CD_Unique2017$EDF),
Median = median(CD_Unique2017$EDF),
Variance = var(CD_Unique2017$EDF),
Skewness = format(round(skewness(CD_Unique2017$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2017$EDF), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018',
Mean = mean(CD_Unique2018$EDF),
Median = median(CD_Unique2018$EDF),
Variance = var(CD_Unique2018$EDF),
Skewness = format(round(skewness(CD_Unique2018$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2018$EDF), 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2019',
Mean = mean(CD_Unique2019$EDF),
Median = median(CD_Unique2019$EDF),
Variance = var(CD_Unique2019$EDF),
Skewness = format(round(skewness(CD_Unique2019$EDF), 4), nsmall = 4),
Kurtosis = format(round(kurtosis(CD_Unique2019$EDF), 4), nsmall = 4)))
ggplot(AllyearsCD, aes(EDF, colours = Year)) + stat_ecdf(geom = 'step') +
labs(title = "Empirical Cumulative Density Function for CD", y = "")
ksObjEDF17 <- ks.test(CD_Unique2016$EDF, y=CD_Unique2017$EDF, alternative = 'two.sided' )
ks_ObjEDF18 <- ks.test(CD_Unique2017$EDF, y=CD_Unique2018$EDF, alternative = 'two.sided' )
ks_ObjEDF1618 <- ks.test(CD_Unique2016$EDF, y=CD_Unique2018$EDF, alternative = 'two.sided' )
ksObjEDF1619 <- ks.test(CD_Unique2016$EDF, y=CD_Unique2019$EDF, alternative = 'two.sided' )
ks_ObjEDF1719 <- ks.test(CD_Unique2017$EDF, y=CD_Unique2019$EDF, alternative = 'two.sided' )
ks_ObjEDF19 <- ks.test(CD_Unique2018$EDF, y=CD_Unique2019$EDF, alternative = 'two.sided' )
data.frame(Year = '2016 to 2017',
D = ksObjEDF17$statistic,
p = format(round(ksObjEDF17$p.value, digits = 4), nsmall = 4)) %>%
bind_rows(data.frame(Year = '2017 to 2018',
D = ks_ObjEDF18$statistic,
p = format(round(ks_ObjEDF18$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2018',
D = ks_ObjEDF1618$statistic,
p = format(round(ks_ObjEDF1618$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2016 to 2019',
D = ksObjEDF1619$statistic,
p = format(round(ksObjEDF1619$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2017 to 2019',
D = ks_ObjEDF1719$statistic,
p = format(round(ks_ObjEDF1719$p.value, digits = 4), nsmall = 4))) %>%
bind_rows(data.frame(Year = '2018 to 2019',
D = ks_ObjEDF19$statistic,
p = format(round(ks_ObjEDF19$p.value, digits = 4), nsmall = 4)))
ggplot(Perm_Unique2016, aes(Perm_Unique2016$SystemPD)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2016 Perm PD') +
labs(x= "PD", y='')
ggplot(Perm_Unique2019, aes(Perm_Unique2019$SystemPD)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2018 Perm PD') +
labs(x= "PD", y='')
ggplot(Perm_Unique2019, aes(Perm_Unique2019$SystemPD)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2019 Perm PD') +
labs(x= "PD", y='')
ggplot(CD_Unique2019, aes(CD_Unique2019$SystemPD)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2019 CD PD') +
labs(x= "PD", y='')
ggplot(Perm_Unique2019, aes(Perm_Unique2019$EDF)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2019 Perm EDF') +
labs(x= "EDF", y='')
ggplot(CD_Unique2019, aes(CD_Unique2019$EDF)) +
geom_histogram(col="red", fill="blue", alpha=.2)  +
labs(title = 'Histogram of 2019 CD EDF') +
labs(x= "EDF", y='')
source('R:/regulatory/Stress Testing 2019/MRM/Model Documents/r/renderModelDoc.R')
library(tidyverse)
library(SNVRegulatory1.5)
library(rmarkdown)
source('R:/regulatory/Stress Testing 2019/MRM/Model Documents/r/convertArimanatorRDS.R')
basePath <- 'R:/regulatory/Stress Testing 2019/MRM/Model Documents/'
iter <- '10'
max_lags <- 5
rds <- readRDS('R:/Projects/ArimanatorRunner/Stress Testing 2019/CHIMPS/2019 Segmentation/output/TGT_ST_19202_20190418.RDS')
chimpsData <- readRDS('R:/regulatory/Stress Testing 2019/Data/2019Q1/chimpsData_2019Q1.rds')
chimpsData <- chimpsData %>%
lapply(.,
function(x){
for (varName in names(x$params)) {
if (varName == 'tyield_30y') {
x$params[[varName]] <- NULL
next()
} else {
for (i in seq(1, max_lags)) {
newVarName <- paste0(varName, '_lag', i)
x$params[[newVarName]] <- x$params[[varName]]
x$params[[newVarName]]$lag <- i
}
}
}
return(data_ts_transform(x))
})
names(chimpsData) <- c('base', names(chimpsData)[2:4], 'adverse', names(chimpsData)[6], 'severe')
modelObj <- convertArimanatorRDS(rds, iter = iter, chimpsData = chimpsData, savePath = NULL)
render(input = paste0(basePath, 'template/ModelDoc.Rmd'),
output_file = paste0(basePath, 'output/MRM', modelObj$id,'-',format(Sys.time(), '%Y%m%d_%H%M%S'),'.docx'),
params = list(rds = modelObj))
library(tidyverse)
library(SNVRegulatory1.5)
library(rmarkdown)
source('R:/regulatory/Stress Testing 2019/MRM/Model Documents/r/convertArimanatorRDS.R')
basePath <- 'R:/regulatory/Stress Testing 2019/MRM/Model Documents/'
iter <- '10'
max_lags <- 5
rds <- readRDS('R:/Projects/ArimanatorRunner/Stress Testing 2019/CHIMPS/2019 Segmentation/output/TGT_ST_19202_20190418.RDS')
rds <- readRDS('R:/Projects/ArimanatorRunner/Stress Test 2019/CHIMPS/2019 Segmentation/output/TGT_ST_19202_20190418.RDS')
chimpsData <- readRDS('R:/regulatory/Stress Testing 2019/Data/2019Q1/chimpsData_2019Q1.rds')
chimpsData <- chimpsData %>%
lapply(.,
function(x){
for (varName in names(x$params)) {
if (varName == 'tyield_30y') {
x$params[[varName]] <- NULL
next()
} else {
for (i in seq(1, max_lags)) {
newVarName <- paste0(varName, '_lag', i)
x$params[[newVarName]] <- x$params[[varName]]
x$params[[newVarName]]$lag <- i
}
}
}
return(data_ts_transform(x))
})
names(chimpsData) <- c('base', names(chimpsData)[2:4], 'adverse', names(chimpsData)[6], 'severe')
modelObj <- convertArimanatorRDS(rds, iter = iter, chimpsData = chimpsData, savePath = NULL)
render(input = paste0(basePath, 'template/ModelDoc.Rmd'),
output_file = paste0(basePath, 'output/MRM', modelObj$id,'-',format(Sys.time(), '%Y%m%d_%H%M%S'),'.docx'),
params = list(rds = modelObj))
